version: '3.8'

services:
  frontend:
    container_name: angular_container
    build:
      context: ./frontend
    ports:
      - "4200:4200"
    depends_on:
      - backend
    volumes:
      - ./frontend/src:/app/src
    networks:
      - mynetwork

  backend:
    container_name: django_container
    build:
      context: ./backend
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    # command: >
    #   bash -c "python manage.py makemigrations &&
    #            python manage.py migrate --noinput &&
    #            daphne -b 0.0.0.0 -p 8000 core.asgi:application"
    command: >
      bash -c "python manage.py makemigrations &&
               python manage.py migrate --noinput &&
               python manage.py runserver 0.0.0.0:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      - REDIS_URL=redis://redis:6379/0
    env_file:
      - .env
    networks:
      - mynetwork

  # celery:
  #   container_name: celery_container
  #   build:
  #     context: ./backend
  #   command: celery -A core worker -l INFO
  #   volumes:
  #     - ./backend:/app
  #   depends_on:
  #     - redis
  #     - backend
  #   env_file:
  #     - .env
  #   networks:
  #     - mynetwork

  # celery-beat:
  #   container_name: celery_beat_container
  #   build:
  #     context: ./backend
  #   command: celery -A core beat -l INFO
  #   volumes:
  #     - ./backend:/app
  #   depends_on:
  #     - redis
  #     - backend
  #   env_file:
  #     - .env
  #   networks:
  #     - mynetwork

  db:
    container_name: database_container
    build:
      context: ./db
    ports:
      - "3306:3306"
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=admin
      - MYSQL_DATABASE=mydb
      - MYSQL_USER=admin
      - MYSQL_PASSWORD=admin
    volumes:
      - ./mysql_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-proot"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - mynetwork

  redis:
    container_name: redis_container
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mynetwork

networks:
  mynetwork:
    driver: bridge

volumes:
  db_data:
  redis_data:

